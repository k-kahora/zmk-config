/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <400>;
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_reset {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {

rpi: require_prior_idle {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
    bindings = <&kp>, <&kp>;
};
        min_under: minus_flat {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comm_amp: comma_ampster {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp AMPERSAND>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_pipe: period_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
	    keep-mods = <(MOD_RSFT)>;
        };

lt_bspc: layer_tap_bspc_del {
    compatible = "zmk,behavior-hold-tap";
    label = "LAYER_TAP_BACKSPACE_DELETE";
    #binding-cells = <2>;
    bindings = <&mo>, <&bspc_del>;
    tapping-term-ms = <200>;
};
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  J  |  C  |  Y  |  K  |  F   |   |  Z  |  L   |  |  |  U  |  Q  |
// |  R  |  S  |  T  |  H  |  D   |   |  M  |  N   |  A  |  I  |  O  |
// |  Z  |  X  |  C  |  V  |  B   |   |  X  |  W   |  -  |  ;  |  ,  |
//             | GUI | NAV |  E   |   | SPC | SYM  | ALT |
bindings = <
    &kp J &kp C &kp Y &kp K &kp F     &kp Z &kp L &dot_pipe &kp U &kp Q
    &rpi RALT R &rpi LGUI S &rpi LCTRL T &rpi LSHIFT H &kp D     &kp M &rpi RSHIFT N &rpi RCTRL A &rpi RGUI I &rpi LALT O
    &kp FSLH &kp V &kp G &kp P &kp B  &kp X &kp W &min_under &kp SEMI &comm_amp
    
             &lt 1 RETURN &lt 2 ESC  &kp E &kp SPACE &lt 3 &bspc_del &kp LC(SPACE)
>;
                };
                nav_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR|     | ESC |  ~   |     |   | TAB | HOME |  UP  | END | DEL  |
// | BT1 | GUI | ALT | CTRL | NUM |   |  /  | LEFT | DOWN | RGT | BSPC |
// | BT2 |     |     |      |     |   |  \  | ENT  |      |     |      |
//             |     |      |     |   |     |      |      |
                        bindings = <
   &bt BT_CLR   &trans      &kp ESC  &kp TILDE &trans     &kp TAB  &kp HOME &kp UP   &kp END   &kp DEL
   &bt BT_SEL 0 &kp K_CMENU &kp RALT &kp LCTRL &mo 3      &kp FSLH &kp LEFT &kp DOWN &kp RIGHT &kp BSPC
   &bt BT_SEL 1 &trans      &trans   &trans    &trans     &kp BSLH &kp RET  &trans   &bootloader    &soft_off
                            &trans   &trans    &trans     &trans   &trans   &trans
                        >;
                };

                sym_layer {
		
//'   =~&#%    '
//"   +^()$    "
//`    *\{}!   `
// 
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |
// |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |
//             | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &trans &trans &kp APOS  &trans   &kp EQUAL &kp TILDE  &kp AT &kp HASH &kp PRCNT
   &trans    &kp LT    &kp GT    &kp DQT    &trans      &kp PLUS &kp CARET &kp LPAR  &kp RPAR &kp DLLR
   &trans    &kp LBKT  &kp RBKT    &kp GRAVE    &trans      &kp STAR &kp BACKSLASH &kp LBRC &kp RBRC &kp EXCL
                       &trans  &trans    &trans   &trans  &trans    &trans
                        >;
                };

// This layer is unreachable until "tri layer state" is sorted out.
// Leaving it here for completeness.
                num_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |   |  A  |  7  |  8  |  9  |  D  |
// |     |     |     |     |     |   |  B  |  4  |  5  |  6  |  E  |
// |     |     |     |     |     |   |  C  |  1  |  2  |  3  |  F  |
//             |     |     |     |   |  0  |  .  |     |
                        bindings = <
   &trans &kp N7 &kp N8 &kp N9 &kp X     &trans &trans &trans &trans &trans
   &trans &kp N4 &kp N5 &kp N6 &trans    &trans &kp RSHIFT &kp RCTRL &kp RGUI &kp RALT 
   &trans &kp N1 &kp N2 &kp N3 &trans    &trans &trans &trans &trans &trans
                 &trans &kp UNDER &kp N0    &trans &trans &trans
                        >;
                };
        };
};


